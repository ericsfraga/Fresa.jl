#+INCLUDE:   /home/ucecesf/hg/homepages/level-0.org
#+title: Fresa, a plant propagation algorithm
#+options: num:nil ^:nil toc:nil tex:imagemagick

| *Author*        | {{{author}}} ({{{email}}})                   |
| *Last revision* | {{{modification-time(%Y-%m-%d %H:%M:%S,t)}}} |

#+toc: headlines 1

* Overview and introduction
/Fresa/ is an implementation of a /plant propagation algorithm/ in [[http://www.julialang.org/][Julia]] programming language.  Our original version was called [[file:strawberry.org][Strawberry]], written in Octave (and usable in MATLAB).  Please see the [[file:strawberry.org][documentation]] of Strawberry for a longer description of the history of these codes, the conditions on which you may use these codes and which articles to cite.

This document has been written using [[http://orgmode.org/][org mode]] in the [[https://www.gnu.org/software/emacs/][Emacs]] text editor.  Org allows for /literate programming/ and uses /tangling/ to generate the actual source files for the code.  The code, tangled from this file, can be found here: call_distribution().

All code (either version) is copyright Â© 2016, Eric S Fraga, all rights reserved.  Permission is given to use this code for evaluation purposes. The code is made available with no warranty or guarantee of any kind.  Use at own risk.  

Please let [[mailto:e.fraga@ucl.ac.uk?subject=The%20Strawberry%20code][the author know]] if you download the code.  Further, if either /Fresa/ or /Strawberry/ codes are sed, please do let the authors know and the [[file:strawberry.org][publications]] must be cited in any research papers written.  Feedback, including bug reports, is most welcome.

In the following code, we assume column vectors for decision variables and objectives.  The convention on constraint violation is 1 meaning yes, i.e. infeasible solution, and 0 means no violation of the constraints.

** Upload to web site                                        :noexport:
#+begin_src shell :results none :exports none
  scp -r fresa.org fresa.html Fresa.jl ltximg socrates.ucl.ac.uk:html.pub
#+end_src
** Code for creating a distribution                          :noexport:
#+name: distribution
#+begin_src shell :results output raw :exports results
  echo [[file:./Fresa.jl][Fresa.jl]]
#+end_src 

#+results: distribution
[[file:./fresa.jl][fresa.jl]]

* Version information

Major version log:

- November 2016 :: first [[http://www.julialang.org/][Julia]] plant propagation algorithm implementation.
* TODO [0/0] improvements or bugs                            :noexport:
* Fresa
:PROPERTIES:
:header-args: :tangle "Fresa.jl"
:END:
#+toc: headlines 2 local
** start of module
#+begin_src julia
  module Fresa

  version = "2016.11.17 14:22:04"
  function __init__()
      println("Fresa PPA $version")
  end
#+end_src
** variables
#+name: variables
#+begin_src julia
  a = 0
  b = 1
  mosd_numberimproved = 0
  npruned = 0
  nsimilar = 0
  population_strategy = 4
  ns = 100
  nrmax = 5
  npop = 100
  ngen = 1000
#+end_src 
** neighbour -- default for real valued decision vectors
#+name: neighbour
#+begin_src julia
  function neighbour(x,f)
      n = x + (1-f) * 2(rand(length(x),1)-0.5)
      println(n)
      n[n.<a] = a[n.<a];
      n[n.>b] = b[n.>b];
      return n
  end
#+end_src 
** set bounds -- for real valued decision vectors
Mostly for testing as bounds will form part of the main method call.
#+begin_src julia
  function setbounds(lower,upper)
      global a = lower;
      global b = upper;
  end
#+end_src 
** module end
#+begin_src julia
  end
#+end_src
* tests
#+toc: headlines 2 local
** neighbour
#+begin_src julia :tangle testneighbour.jl
  using Fresa
  x = rand(5,1)
  println("$x")
  a = zeros(5,1)
  b = ones(5,1)
  Fresa.setbounds(a,b)
  for i in 1:10
      println(i)
      n = Fresa.neighbour(x,0.1)
      println("$n")
  end
#+end_src 
* Recent change history
#+name: changehistoryshellblock
#+begin_src shell :exports results :results output
  hg log --template "{date|shortdate} {desc|firstline}\n" --limit 10
#+end_src
* settings                                                    :noexport:
** org startup on file visit
#+name: startup
#+begin_src emacs-lisp :results none
  (setq-local htmlize-output-type 'inline-css)
#+end_src
** emacs local variables

# Local Variables:
# eval: (esf/execute-startup-block)
# time-stamp-line-limit: 1000
# time-stamp-format: "%04y.%02m.%02d %02H:%02M:%02S"
# time-stamp-active: t
# time-stamp-start: "version = \""
# time-stamp-end: "\""
# End:
